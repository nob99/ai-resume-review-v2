openapi: 3.0.3
info:
  title: AI Resume Review System API
  description: |
    REST API for the AI Resume Review System that allows users to upload resumes,
    get AI-powered analysis, and manage their review history with secure authentication.
  version: 1.0.0
  contact:
    name: AI Resume Review Team
    email: support@resumereview.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://api-dev.resumereview.com/api/v1
    description: Development environment
  - url: https://api.resumereview.com/api/v1
    description: Production environment

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: |
        Authenticate user with email and password, returns JWT access token.
        - Rate limited: 5 attempts per minute per IP
        - Account lockout after multiple failed attempts
        - Secure password verification with bcrypt
      operationId: loginUser
      security: []  # No auth required for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "user@example.com"
              password: "securePassword123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                tokenType: "bearer"
                expiresIn: 1800
                user:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  email: "user@example.com"
                  firstName: "John"
                  lastName: "Doe"
                  role: "consultant"
                  isActive: true
                  createdAt: "2024-01-15T10:30:00Z"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: "Invalid email or password"
        '423':
          description: Account locked due to multiple failed attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: "Account is temporarily locked due to multiple failed login attempts"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: "Too many login attempts. Please try again later."
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: |
        Logout user and invalidate JWT token.
        - Clears server-side session if applicable
        - Client should remove token from storage
      operationId: logoutUser
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: |
        Refresh expired access token using refresh token.
        - Access tokens expire in 15 minutes
        - Refresh tokens expire in 7 days
        - Implements token rotation for security
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user info
      description: Get information about the currently authenticated user
      operationId: getCurrentUser
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload/resume:
    post:
      tags:
        - File Upload
      summary: Upload resume for analysis
      description: |
        Upload a resume file (PDF, DOC, or DOCX) for AI-powered analysis.
        
        **Features:**
        - Supports PDF, DOC, and DOCX files
        - Maximum file size: 30MB
        - Comprehensive validation (file type, size, content)
        - Rate limited: 30 uploads per hour
        - Secure UUID-based file storage
        - Integration with analysis pipeline
        
        **Process:**
        1. Rate limit check (30 uploads/hour)
        2. File validation (type, size, structure)
        3. Secure storage with UUID naming
        4. Database record creation
        5. Queue for AI analysis
      operationId: uploadResume
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Resume file (PDF, DOC, or DOCX, max 30MB)
                target_role:
                  type: string
                  maxLength: 255
                  description: Target job role for analysis
                  example: "Software Engineer"
                target_industry:
                  type: string
                  maxLength: 255
                  description: Target industry for analysis
                  example: "Technology"
                experience_level:
                  type: string
                  enum: ["entry", "mid", "senior", "executive"]
                  description: Experience level for tailored analysis
                  example: "mid"
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
        '400':
          description: File validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadError'
              examples:
                validation_failed:
                  summary: File validation failed
                  value:
                    error: "FILE_VALIDATION_FAILED"
                    message: "File validation failed"
                    validation_errors: ["File type 'text/plain' not allowed. Allowed: application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document"]
                empty_file:
                  summary: Empty file
                  value:
                    detail: "File is empty"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: "File size (35.2MB) exceeds maximum allowed size (30.0MB)"
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: "Too many requests for file_upload"
                block_time_remaining: 1800
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload/list:
    get:
      tags:
        - File Upload
      summary: List user's uploaded files
      description: |
        Get a paginated list of files uploaded by the current user.
        Results are ordered by upload date (newest first).
      operationId: listUploads
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: per_page
          in: query
          description: Items per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
      responses:
        '200':
          description: List of uploads retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload/{upload_id}/status:
    get:
      tags:
        - File Upload
      summary: Get upload status
      description: |
        Get the current processing status of a specific upload.
        Shows progress through the analysis pipeline.
      operationId: getUploadStatus
      parameters:
        - name: upload_id
          in: path
          required: true
          description: Upload ID
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Upload status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadStatusResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Upload not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: "Upload not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload/{upload_id}:
    delete:
      tags:
        - File Upload
      summary: Delete upload
      description: |
        Delete an uploaded file and its associated analysis data.
        This action cannot be undone.
      operationId: deleteUpload
      parameters:
        - name: upload_id
          in: path
          required: true
          description: Upload ID to delete
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Upload deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDeleteResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Upload not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: "Upload not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload/stats:
    get:
      tags:
        - File Upload
      summary: Get upload statistics
      description: |
        Get statistics about the current user's uploads including
        total counts, file types, and rate limit status.
      operationId: getUploadStats
      responses:
        '200':
          description: Upload statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadStatsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from /auth/login endpoint.
        Format: "Bearer <jwt_token>"

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
          maxLength: 255
        password:
          type: string
          format: password
          description: User's password
          minLength: 8
          maxLength: 128
          example: "securePassword123!"

    LoginResponse:
      type: object
      required:
        - accessToken
        - tokenType
        - expiresIn
        - user
      properties:
        accessToken:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType:
          type: string
          enum: ["bearer"]
          description: Token type
          example: "bearer"
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 1800
        user:
          $ref: '#/components/schemas/UserResponse'

    TokenResponse:
      type: object
      required:
        - accessToken
        - tokenType
        - expiresIn
      properties:
        accessToken:
          type: string
          description: New JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType:
          type: string
          enum: ["bearer"]
          description: Token type
          example: "bearer"
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 900
        refreshToken:
          type: string
          description: New refresh token (rotated for security)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserResponse:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - role
        - isActive
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        firstName:
          type: string
          description: User's first name
          example: "John"
          maxLength: 100
        lastName:
          type: string
          description: User's last name
          example: "Doe"
          maxLength: 100
        role:
          type: string
          enum: ["consultant", "admin"]
          description: User's role in the system
          example: "consultant"
        isActive:
          type: boolean
          description: Whether the user account is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"

    ErrorResponse:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
          description: Error message describing what went wrong
          example: "Invalid email or password"
        code:
          type: string
          description: Optional error code for programmatic handling
          example: "AUTH_INVALID_CREDENTIALS"
        errors:
          type: array
          description: Optional list of validation errors
          items:
            type: object
            properties:
              field:
                type: string
                description: Field that caused the error
                example: "email"
              message:
                type: string
                description: Specific error message
                example: "Invalid email format"

    # File Upload Schemas
    FileUploadResponse:
      type: object
      required:
        - id
        - original_filename
        - file_size
        - mime_type
        - status
        - created_at
        - validation_info
      properties:
        id:
          type: string
          format: uuid
          description: Unique analysis request ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        original_filename:
          type: string
          description: Original filename
          example: "resume.pdf"
        file_size:
          type: integer
          description: File size in bytes
          example: 1048576
        mime_type:
          type: string
          description: File MIME type
          example: "application/pdf"
        status:
          type: string
          enum: ["pending", "processing", "completed", "failed"]
          description: Current processing status
          example: "pending"
        target_role:
          type: string
          description: Target job role
          example: "Software Engineer"
        target_industry:
          type: string
          description: Target industry
          example: "Technology"
        experience_level:
          type: string
          enum: ["entry", "mid", "senior", "executive"]
          description: Experience level
          example: "mid"
        created_at:
          type: string
          format: date-time
          description: Upload timestamp
          example: "2024-01-15T10:30:00Z"
        validation_info:
          $ref: '#/components/schemas/FileValidationInfo'

    FileValidationInfo:
      type: object
      required:
        - is_valid
        - errors
        - warnings
        - file_size
        - mime_type
        - file_extension
        - file_hash
      properties:
        is_valid:
          type: boolean
          description: Whether file passed validation
          example: true
        errors:
          type: array
          description: Validation errors
          items:
            type: string
          example: []
        warnings:
          type: array
          description: Validation warnings
          items:
            type: string
          example: ["PDF file may be truncated or corrupted"]
        file_size:
          type: integer
          description: File size in bytes
          example: 1048576
        mime_type:
          type: string
          description: Detected MIME type
          example: "application/pdf"
        file_extension:
          type: string
          description: File extension
          example: ".pdf"
        file_hash:
          type: string
          description: SHA256 hash of file content
          example: "abc123def456789..."

    FileUploadError:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
          example: "FILE_VALIDATION_FAILED"
        message:
          type: string
          description: Human-readable error message
          example: "File validation failed"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        validation_errors:
          type: array
          description: File validation errors
          items:
            type: string
          example: ["File type 'text/plain' not allowed"]

    UploadListResponse:
      type: object
      required:
        - uploads
        - total
        - page
        - per_page
        - has_more
      properties:
        uploads:
          type: array
          description: List of user uploads
          items:
            $ref: '#/components/schemas/FileUploadResponse'
        total:
          type: integer
          description: Total number of uploads
          example: 15
        page:
          type: integer
          description: Current page number
          example: 1
        per_page:
          type: integer
          description: Items per page
          example: 20
        has_more:
          type: boolean
          description: Whether more pages exist
          example: false

    UploadStatusResponse:
      type: object
      required:
        - id
        - status
        - original_filename
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Analysis request ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        status:
          type: string
          enum: ["pending", "processing", "completed", "failed"]
          description: Current status
          example: "processing"
        original_filename:
          type: string
          description: Original filename
          example: "resume.pdf"
        created_at:
          type: string
          format: date-time
          description: Upload timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:35:00Z"
        completed_at:
          type: string
          format: date-time
          description: Completion timestamp
          example: "2024-01-15T10:40:00Z"
        error_message:
          type: string
          description: Error message if failed
          example: "Analysis pipeline error"
        progress_info:
          type: object
          description: Processing progress info
          additionalProperties: true
          example:
            step: "text_extraction"
            progress: 75

    UploadDeleteResponse:
      type: object
      required:
        - success
        - message
        - id
      properties:
        success:
          type: boolean
          description: Whether deletion was successful
          example: true
        message:
          type: string
          description: Success or error message
          example: "Upload 'resume.pdf' deleted successfully"
        id:
          type: string
          format: uuid
          description: ID of deleted upload
          example: "550e8400-e29b-41d4-a716-446655440000"

    UploadStatsResponse:
      type: object
      required:
        - stats
        - rate_limit_info
      properties:
        stats:
          $ref: '#/components/schemas/UploadStats'
        rate_limit_info:
          type: object
          description: Current rate limit status
          properties:
            uploads_allowed_per_hour:
              type: integer
              example: 30
            uploads_remaining:
              type: integer
              example: 25
            reset_time:
              type: string
              format: date-time
              example: "2024-01-15T11:00:00Z"

    UploadStats:
      type: object
      required:
        - total_uploads
        - pending_uploads
        - completed_uploads
        - failed_uploads
        - total_storage_bytes
        - file_type_breakdown
      properties:
        total_uploads:
          type: integer
          description: Total number of uploads
          example: 15
        pending_uploads:
          type: integer
          description: Number of pending uploads
          example: 2
        completed_uploads:
          type: integer
          description: Number of completed uploads
          example: 12
        failed_uploads:
          type: integer
          description: Number of failed uploads
          example: 1
        total_storage_bytes:
          type: integer
          description: Total storage used in bytes
          example: 15728640
        most_recent_upload:
          type: string
          format: date-time
          description: Timestamp of most recent upload
          example: "2024-01-15T10:30:00Z"
        file_type_breakdown:
          type: object
          description: Breakdown by file type
          additionalProperties:
            type: integer
          example:
            "application/pdf": 10
            "application/msword": 3
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document": 2

  responses:
    UnauthorizedError:
      description: Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Could not validate credentials"

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Admin privileges required"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Resource not found"

    ValidationError:
      description: Request validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Validation error"
            errors:
              - field: "email"
                message: "Invalid email format"
              - field: "password"
                message: "Password must be at least 8 characters"

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Too many requests. Please try again later."

tags:
  - name: Authentication
    description: |
      User authentication and session management endpoints.
      
      **Security Features:**
      - JWT-based authentication with short-lived access tokens (15 min)
      - Refresh token rotation for enhanced security
      - Rate limiting to prevent brute force attacks
      - Account lockout mechanism for suspicious activity
      - Secure password hashing with bcrypt
      
      **Token Management:**
      - Access tokens expire in 15 minutes for security
      - Refresh tokens expire in 7 days
      - Maximum 3 concurrent sessions per user
      - Tokens include user ID, email, role, and expiration claims
  
  - name: File Upload
    description: |
      Resume file upload and management endpoints.
      
      **Upload Features:**
      - Support for PDF, DOC, and DOCX files
      - Maximum file size: 30MB per upload
      - Comprehensive file validation (type, size, content structure)
      - Secure UUID-based file storage
      - Rate limiting: 30 uploads per hour per user
      
      **File Processing:**
      - Magic number verification for file type validation
      - Content structure validation for file integrity
      - SHA256 hash generation for file verification
      - Automatic cleanup of old files
      - Integration with AI analysis pipeline
      
      **Management:**
      - List user uploads with pagination
      - Track upload status and progress
      - Delete uploads and associated data
      - Upload statistics and rate limit monitoring