# ============================================================================
# CI/CD Pipeline: Staging Environment
# ============================================================================
#
# Trigger: Automatically runs on push to 'main' branch and PRs to 'main'
#
# What it does:
#   1. Runs tests and linting (non-blocking for MVP)
#   2. Builds Docker images (backend + frontend with staging API URL)
#   3. Deploys to Cloud Run staging environment
#   4. Runs health checks
#
# Environment: https://ai-resume-review-v2-frontend-staging-wnjxxf534a-uc.a.run.app
# ============================================================================

name: CI and Deploy to Staging

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GCP_PROJECT_ID: ytgrs-464303
  GCP_REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/ytgrs-464303/ai-resume-review-v2
  BACKEND_SERVICE: ai-resume-review-v2-backend-staging
  FRONTEND_SERVICE: ai-resume-review-v2-frontend-staging

jobs:
  # Job 1: Run tests and linting
  test:
    name: Run Tests and Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Frontend tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint || echo "::warning::ESLint issues found - continuing for MVP"
        continue-on-error: true

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test -- --passWithNoTests || echo "::warning::Frontend tests failed - continuing for MVP"
        continue-on-error: true

      # Backend tests
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 pytest

      - name: Run Black (format check)
        working-directory: backend
        run: black --check app/ || echo "::warning::Black formatting issues found"
        continue-on-error: true

      - name: Run Flake8 (linting)
        working-directory: backend
        run: flake8 app/ --max-line-length=100 --extend-ignore=E203,W503 || echo "::warning::Flake8 issues found"
        continue-on-error: true

      - name: Run backend unit tests
        working-directory: backend
        run: pytest -m "not integration" --tb=short || echo "::warning::Backend tests failed - continuing for MVP"
        continue-on-error: true

  # Job 2: Build and deploy to staging (only on push to main)
  build-and-deploy:
    name: Build and Deploy to Staging
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/864523342928/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions-deployer@ytgrs-464303.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      # Build Backend
      - name: Build Backend Docker Image
        run: |
          docker build \
            -f backend/Dockerfile \
            -t ${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }} \
            -t ${{ env.ARTIFACT_REGISTRY }}/backend:staging-latest \
            .

      - name: Push Backend Image
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend:staging-latest

      # Build Frontend (with staging API URL)
      - name: Build Frontend Docker Image (Staging)
        run: |
          docker build \
            -f frontend/Dockerfile \
            --build-arg NEXT_PUBLIC_API_URL=https://ai-resume-review-v2-backend-staging-wnjxxf534a-uc.a.run.app \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}-staging \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:staging-latest \
            frontend

      - name: Push Frontend Image
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}-staging
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:staging-latest

      # Deploy Backend to Cloud Run
      - name: Deploy Backend to Staging
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image=${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --quiet

      # Deploy Frontend to Cloud Run
      - name: Deploy Frontend to Staging
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image=${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}-staging \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --quiet

      # Health Checks
      - name: Wait for services to be ready
        run: sleep 30

      - name: Check Backend Health
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "Backend URL: $BACKEND_URL"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/health")
          echo "Backend health check status: $RESPONSE"

          if [ "$RESPONSE" != "200" ]; then
            echo "::warning::Backend health check returned $RESPONSE (expected 200)"
          fi

      - name: Check Frontend Health
        run: |
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "Frontend URL: $FRONTEND_URL"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
          echo "Frontend health check status: $RESPONSE"

          if [ "$RESPONSE" != "200" ]; then
            echo "::warning::Frontend health check returned $RESPONSE (expected 200)"
          fi

      - name: Deployment Summary
        run: |
          echo "### Staging Deployment Successful! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** https://ai-resume-review-v2-backend-staging-wnjxxf534a-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** https://ai-resume-review-v2-frontend-staging-wnjxxf534a-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
