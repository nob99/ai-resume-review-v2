# ============================================================================
# CI/CD Pipeline: Staging Environment
# ============================================================================
#
# Trigger: Automatically runs on push to 'main' branch and PRs to 'main'
#
# What it does:
#   1. Runs tests and linting (non-blocking for MVP)
#   2. Builds Docker images (backend + frontend with staging API URL)
#   3. Deploys to Cloud Run staging environment
#   4. Runs health checks
#
# Environment: https://ai-resume-review-v2-frontend-staging-wnjxxf534a-uc.a.run.app
# ============================================================================

name: CI and Deploy to Staging

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GCP_PROJECT_ID: ytgrs-464303
  GCP_REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/ytgrs-464303/ai-resume-review-v2
  BACKEND_SERVICE: ai-resume-review-v2-backend-staging
  FRONTEND_SERVICE: ai-resume-review-v2-frontend-staging

jobs:
  # Job 1: Run tests and linting
  test:
    name: Run Tests and Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Frontend tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint || echo "::warning::ESLint issues found - continuing for MVP"
        continue-on-error: true

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test -- --passWithNoTests || echo "::warning::Frontend tests failed - continuing for MVP"
        continue-on-error: true

      # Backend tests
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 pytest

      - name: Run Black (format check)
        working-directory: backend
        run: black --check app/ || echo "::warning::Black formatting issues found"
        continue-on-error: true

      - name: Run Flake8 (linting)
        working-directory: backend
        run: flake8 app/ --max-line-length=100 --extend-ignore=E203,W503 || echo "::warning::Flake8 issues found"
        continue-on-error: true

      - name: Run backend unit tests
        working-directory: backend
        run: pytest -m "not integration" --tb=short || echo "::warning::Backend tests failed - continuing for MVP"
        continue-on-error: true

  # Job 2: Build and deploy to staging (only on push to main)
  build-and-deploy:
    name: Build and Deploy to Staging
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/864523342928/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions-deployer@ytgrs-464303.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      # Build Backend
      - name: Build Backend Docker Image
        run: |
          docker build \
            -f backend/Dockerfile \
            -t ${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }} \
            -t ${{ env.ARTIFACT_REGISTRY }}/backend:staging-latest \
            .

      - name: Push Backend Image
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend:staging-latest

      # Build Frontend (with staging API URL)
      - name: Build Frontend Docker Image (Staging)
        run: |
          docker build \
            -f frontend/Dockerfile \
            --build-arg NEXT_PUBLIC_API_URL=https://ai-resume-review-v2-backend-staging-wnjxxf534a-uc.a.run.app \
            --build-arg NEXT_PUBLIC_ENV_NAME=staging \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}-staging \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:staging-latest \
            frontend

      - name: Push Frontend Image
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}-staging
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:staging-latest

      # Deploy Backend to Cloud Run using deployment script
      - name: Deploy Backend to Staging
        run: |
          # Make script executable
          chmod +x scripts/gcp/deploy/deploy.sh

          # Use deployment script with CI/CD flags
          # --skip-build: GitHub Actions already built the image
          # --backend-image: Use the image we just built
          # --skip-frontend: Frontend is deployed separately
          # --skip-tests: Health checks done in separate step
          scripts/gcp/deploy/deploy.sh \
            --environment=staging \
            --step=backend \
            --skip-build \
            --backend-image=${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }} \
            --skip-tests

      # Deploy Frontend to Cloud Run
      - name: Deploy Frontend to Staging
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image=${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}-staging \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --quiet

      # Health Checks
      - name: Wait for services to be ready
        run: sleep 30

      - name: Check Backend Health
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "Backend URL: $BACKEND_URL"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/health")
          echo "Backend health check status: $RESPONSE"

          if [ "$RESPONSE" != "200" ]; then
            echo "::warning::Backend health check returned $RESPONSE (expected 200)"
          fi

      - name: Check Frontend Health
        run: |
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "Frontend URL: $FRONTEND_URL"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
          echo "Frontend health check status: $RESPONSE"

          if [ "$RESPONSE" != "200" ]; then
            echo "::warning::Frontend health check returned $RESPONSE (expected 200)"
          fi

      # Smoke Tests - Comprehensive post-deployment validation
      - name: Smoke Test 1 - Backend Health Endpoint
        run: |
          echo "üß™ Testing backend health endpoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" https://ai-resume-review-v2-backend-staging-wnjxxf534a-uc.a.run.app/health)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          echo "HTTP Code: $HTTP_CODE"
          echo "Response Body: $BODY"

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ùå Backend health check failed (HTTP $HTTP_CODE)"
            echo "::error::Backend health endpoint returned $HTTP_CODE instead of 200"
            exit 1
          fi

      - name: Smoke Test 2 - CORS Preflight Check
        run: |
          echo "üß™ Testing CORS configuration..."
          RESPONSE=$(curl -i -s -X OPTIONS \
            -H "Origin: https://ai-resume-review-v2-frontend-staging-wnjxxf534a-uc.a.run.app" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: Content-Type" \
            https://ai-resume-review-v2-backend-staging-wnjxxf534a-uc.a.run.app/api/v1/auth/login)

          echo "CORS Preflight Response:"
          echo "$RESPONSE"

          if echo "$RESPONSE" | grep -iq "access-control-allow-origin"; then
            echo "‚úÖ CORS preflight passed"
          else
            echo "‚ùå CORS headers not found in preflight response"
            echo "::error::CORS configuration is broken - frontend cannot communicate with backend"
            exit 1
          fi

      - name: Smoke Test 3 - Login Endpoint Availability
        run: |
          echo "üß™ Testing login endpoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            https://ai-resume-review-v2-backend-staging-wnjxxf534a-uc.a.run.app/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"invalid@test.com","password":"wrong"}')

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $BODY"

          # Should return 401 or 400 (not 500 or 503)
          if [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "400" ] || [ "$HTTP_CODE" = "422" ]; then
            echo "‚úÖ Login endpoint responding correctly (rejected invalid credentials)"
          else
            echo "‚ùå Login endpoint not working properly (HTTP $HTTP_CODE)"
            echo "::error::Login endpoint returned unexpected status code $HTTP_CODE"
            exit 1
          fi

      - name: Smoke Test 4 - Database Environment Validation
        run: |
          echo "üß™ Checking database environment validation logs..."

          # Wait a bit for logs to propagate
          sleep 10

          # Check if environment validation log entry exists
          VALIDATION_LOG=$(gcloud logging read \
            "resource.type=cloud_run_revision AND
             resource.labels.service_name=ai-resume-review-v2-backend-staging AND
             (textPayload=~\"Database environment validated successfully\" OR jsonPayload.message=~\"Database environment validated\")" \
            --limit=5 \
            --format=json \
            --project=ytgrs-464303 2>&1 || echo "[]")

          if echo "$VALIDATION_LOG" | grep -q "staging"; then
            echo "‚úÖ Database environment validation confirmed (staging DB)"
          else
            echo "‚ö†Ô∏è  Could not confirm database environment validation in logs"
            echo "This may be a timing issue - logs can take time to appear"
            echo "Check manually: Container should have logged 'Database environment validated'"
          fi

      - name: Smoke Tests Summary
        if: success()
        run: |
          echo ""
          echo "=========================================="
          echo "‚úÖ All Smoke Tests Passed!"
          echo "=========================================="
          echo "1. ‚úÖ Backend health endpoint"
          echo "2. ‚úÖ CORS configuration"
          echo "3. ‚úÖ Login endpoint"
          echo "4. ‚úÖ Database environment validation"
          echo ""
          echo "Staging deployment is healthy and ready for testing."

      - name: Deployment Summary
        run: |
          echo "### Staging Deployment Successful! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** https://ai-resume-review-v2-backend-staging-wnjxxf534a-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** https://ai-resume-review-v2-frontend-staging-wnjxxf534a-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
