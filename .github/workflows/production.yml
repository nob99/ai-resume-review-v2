# ============================================================================
# Deployment: Production Environment
# ============================================================================
#
# Trigger: Manual only (workflow_dispatch)
#
# What it does:
#   1. Deploys backend using image tag from staging (or specific tag)
#   2. Builds fresh frontend with production API URL
#   3. Deploys to Cloud Run production environment
#   4. Runs health checks
#
# Environment: https://ai-resume-review-v2-frontend-prod-wnjxxf534a-uc.a.run.app
#
# Note: Requires manual trigger for safety
# ============================================================================

name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      backend_image_tag:
        description: 'Backend image tag to deploy (git SHA or "staging-latest")'
        required: true
        default: 'staging-latest'
      frontend_build_from_staging:
        description: 'Build new frontend image (required for production API URL)'
        required: true
        type: boolean
        default: true

env:
  GCP_PROJECT_ID: ytgrs-464303
  GCP_REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/ytgrs-464303/ai-resume-review-v2
  BACKEND_SERVICE: ai-resume-review-v2-backend-prod
  FRONTEND_SERVICE: ai-resume-review-v2-frontend-prod

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://ai-resume-review-v2-frontend-prod-wnjxxf534a-uc.a.run.app

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        if: inputs.frontend_build_from_staging == true
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/864523342928/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions-deployer@ytgrs-464303.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        if: inputs.frontend_build_from_staging == true
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      # Build Frontend with Production API URL
      - name: Build Frontend Docker Image (Production)
        if: inputs.frontend_build_from_staging == true
        run: |
          docker build \
            -f frontend/Dockerfile \
            --build-arg NEXT_PUBLIC_API_URL=https://ai-resume-review-v2-backend-prod-wnjxxf534a-uc.a.run.app \
            --build-arg NEXT_PUBLIC_ENV_NAME=prod \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}-production \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:production-latest \
            frontend

      - name: Push Frontend Image
        if: inputs.frontend_build_from_staging == true
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}-production
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:production-latest

      # Verify images exist
      - name: Verify Backend Image Exists
        run: |
          echo "Checking if backend image exists: ${{ env.ARTIFACT_REGISTRY }}/backend:${{ inputs.backend_image_tag }}"
          gcloud artifacts docker images describe \
            ${{ env.ARTIFACT_REGISTRY }}/backend:${{ inputs.backend_image_tag }} || \
            (echo "::error::Backend image not found" && exit 1)

      # Deploy Backend to Production using deployment script
      - name: Deploy Backend to Production
        run: |
          # Make script executable
          chmod +x scripts/gcp/deploy/deploy.sh

          # Use deployment script with CI/CD flags
          # --skip-build: Using existing image from staging or specific tag
          # --backend-image: Use the specified image tag
          # --skip-frontend: Frontend is deployed separately
          # --skip-tests: Health checks done in separate step
          echo "Deploying backend image: ${{ env.ARTIFACT_REGISTRY }}/backend:${{ inputs.backend_image_tag }}"
          scripts/gcp/deploy/deploy.sh \
            --environment=production \
            --step=backend \
            --skip-build \
            --backend-image=${{ env.ARTIFACT_REGISTRY }}/backend:${{ inputs.backend_image_tag }} \
            --skip-tests

      # Deploy Frontend to Production
      - name: Deploy Frontend to Production
        run: |
          FRONTEND_TAG="${{ github.sha }}-production"
          if [ "${{ inputs.frontend_build_from_staging }}" != "true" ]; then
            FRONTEND_TAG="production-latest"
          fi

          echo "Deploying frontend image: ${{ env.ARTIFACT_REGISTRY }}/frontend:$FRONTEND_TAG"
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image=${{ env.ARTIFACT_REGISTRY }}/frontend:$FRONTEND_TAG \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --quiet

      # Health Checks
      - name: Wait for services to be ready
        run: sleep 30

      - name: Check Backend Health
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "Backend URL: $BACKEND_URL"

          for i in {1..5}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/health")
            echo "Backend health check attempt $i: $RESPONSE"

            if [ "$RESPONSE" = "200" ]; then
              echo "‚úÖ Backend is healthy!"
              break
            fi

            if [ $i -eq 5 ]; then
              echo "::error::Backend health check failed after 5 attempts"
              exit 1
            fi

            sleep 10
          done

      - name: Check Frontend Health
        run: |
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "Frontend URL: $FRONTEND_URL"

          for i in {1..5}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
            echo "Frontend health check attempt $i: $RESPONSE"

            if [ "$RESPONSE" = "200" ]; then
              echo "‚úÖ Frontend is healthy!"
              break
            fi

            if [ $i -eq 5 ]; then
              echo "::error::Frontend health check failed after 5 attempts"
              exit 1
            fi

            sleep 10
          done

      # Smoke Tests - Comprehensive post-deployment validation for production
      - name: Smoke Test 1 - Backend Health Endpoint
        run: |
          echo "üß™ Testing backend health endpoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" https://ai-resume-review-v2-backend-prod-wnjxxf534a-uc.a.run.app/health)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          echo "HTTP Code: $HTTP_CODE"
          echo "Response Body: $BODY"

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ùå Backend health check failed (HTTP $HTTP_CODE)"
            echo "::error::Backend health endpoint returned $HTTP_CODE instead of 200"
            exit 1
          fi

      - name: Smoke Test 2 - CORS Preflight Check
        run: |
          echo "üß™ Testing CORS configuration..."
          RESPONSE=$(curl -i -s -X OPTIONS \
            -H "Origin: https://ai-resume-review-v2-frontend-prod-wnjxxf534a-uc.a.run.app" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: Content-Type" \
            https://ai-resume-review-v2-backend-prod-wnjxxf534a-uc.a.run.app/api/v1/auth/login)

          echo "CORS Preflight Response:"
          echo "$RESPONSE"

          if echo "$RESPONSE" | grep -iq "access-control-allow-origin"; then
            echo "‚úÖ CORS preflight passed"
          else
            echo "‚ùå CORS headers not found in preflight response"
            echo "::error::CORS configuration is broken - frontend cannot communicate with backend"
            exit 1
          fi

      - name: Smoke Test 3 - Login Endpoint Availability
        run: |
          echo "üß™ Testing login endpoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            https://ai-resume-review-v2-backend-prod-wnjxxf534a-uc.a.run.app/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"invalid@test.com","password":"wrong"}')

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $BODY"

          # Should return 401 or 400 (not 500 or 503)
          if [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "400" ] || [ "$HTTP_CODE" = "422" ]; then
            echo "‚úÖ Login endpoint responding correctly (rejected invalid credentials)"
          else
            echo "‚ùå Login endpoint not working properly (HTTP $HTTP_CODE)"
            echo "::error::Login endpoint returned unexpected status code $HTTP_CODE"
            exit 1
          fi

      - name: Smoke Test 4 - Database Environment Validation
        run: |
          echo "üß™ Checking database environment validation logs..."

          # Wait a bit for logs to propagate
          sleep 10

          # Check if environment validation log entry exists
          VALIDATION_LOG=$(gcloud logging read \
            "resource.type=cloud_run_revision AND
             resource.labels.service_name=ai-resume-review-v2-backend-prod AND
             (textPayload=~\"Database environment validated successfully\" OR jsonPayload.message=~\"Database environment validated\")" \
            --limit=5 \
            --format=json \
            --project=ytgrs-464303 2>&1 || echo "[]")

          if echo "$VALIDATION_LOG" | grep -q "production" || echo "$VALIDATION_LOG" | grep -q "prod"; then
            echo "‚úÖ Database environment validation confirmed (production DB)"
          else
            echo "‚ö†Ô∏è  Could not confirm database environment validation in logs"
            echo "This may be a timing issue - logs can take time to appear"
            echo "Check manually: Container should have logged 'Database environment validated'"
          fi

      - name: Smoke Tests Summary
        if: success()
        run: |
          echo ""
          echo "=========================================="
          echo "‚úÖ All Production Smoke Tests Passed!"
          echo "=========================================="
          echo "1. ‚úÖ Backend health endpoint"
          echo "2. ‚úÖ CORS configuration"
          echo "3. ‚úÖ Login endpoint"
          echo "4. ‚úÖ Database environment validation"
          echo ""
          echo "Production deployment is healthy and serving traffic."

      - name: Deployment Summary
        run: |
          echo "### Production Deployment Successful! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** https://ai-resume-review-v2-backend-prod-wnjxxf534a-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** https://ai-resume-review-v2-frontend-prod-wnjxxf534a-uc.a.run.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Image:** ${{ inputs.backend_image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Rollback Instructions" >> $GITHUB_STEP_SUMMARY
          echo "If issues occur, rollback using:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "gcloud run services update-traffic ${{ env.BACKEND_SERVICE }} --to-revisions=PREVIOUS_REVISION=100 --region=${{ env.GCP_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "gcloud run services update-traffic ${{ env.FRONTEND_SERVICE }} --to-revisions=PREVIOUS_REVISION=100 --region=${{ env.GCP_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
